# ====================================
# SECURITY WARNING - PRODUCTION DEPLOYMENT
# ====================================
# 1. Copy this file to .env
# 2. NEVER commit .env to version control
# 3. Use strong, unique passwords
# 4. Rotate credentials regularly
# 5. Use environment-specific values
# ====================================

# === BREEZE CONNECT API CONFIGURATION ===
# Get your API credentials from: https://api.icicidirect.com/apiuser/login
BREEZE_API_KEY=your_breeze_api_key_here
BREEZE_API_SECRET=your_breeze_api_secret_here
BREEZE_API_SESSION=your_breeze_session_token_here
# SECURITY: Never store passwords in plain text in production
BREEZE_USER_ID=your_email@example.com
BREEZE_PASSWORD=use_secure_password_manager
BREEZE_TOTP_SECRET=your_breeze_totp_secret_here

# === KITE CONNECT API CONFIGURATION ===
# Get your API credentials from: https://developers.kite.trade/
KITE_API_KEY=your_kite_api_key_here
KITE_API_SECRET=your_kite_api_secret_here
KITE_ACCESS_TOKEN=daily_access_token_here
# SECURITY: Never store passwords in plain text in production
KITE_USER_ID=your_kite_user_id
KITE_PASSWORD=use_secure_password_manager
KITE_TOTP_SECRET=your_kite_totp_secret_here
KITE_REQUEST_TOKEN=request_token_here

# === DATABASE CONFIGURATION ===
# For production, use SQL Server Standard/Enterprise or PostgreSQL
DB_SERVER=(localdb)\mssqllocaldb
DB_NAME=KiteConnectApi
DB_DRIVER=ODBC Driver 17 for SQL Server
DB_TRUSTED_CONNECTION=true
# For production with SQL authentication:
# DB_USERNAME=your_db_username
# DB_PASSWORD=your_db_password
# DB_ENCRYPT=true
# DB_TRUST_SERVER_CERTIFICATE=false

# === APPLICATION SECURITY ===
# Generate strong secrets: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=generate_a_very_long_random_string_here
APP_SECRET_KEY=generate_another_very_long_random_string_here
ENCRYPTION_KEY=generate_32_byte_key_for_encryption

# === API SECURITY ===
# For internal API authentication
API_KEY=generate_api_key_here
API_SECRET=generate_api_secret_here

# === EMAIL CONFIGURATION (Optional) ===
# For alerts and notifications
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_specific_password
ALERT_EMAIL=alerts@yourdomain.com

# === ENVIRONMENT CONFIGURATION ===
# Options: development, staging, production
ENVIRONMENT=development
DEBUG=false
LOG_LEVEL=INFO

# === RATE LIMITING ===
# Requests per minute
RATE_LIMIT_PER_MINUTE=60
MAX_CONNECTIONS=100

# === TRADING CONFIGURATION ===
# Risk management settings
MAX_POSITION_SIZE=1800
MAX_DAILY_LOSS=50000
MAX_CONCURRENT_POSITIONS=3
PAPER_TRADING_MODE=true

# === MONITORING ===
# Optional: For production monitoring
SENTRY_DSN=your_sentry_dsn_here
PROMETHEUS_PORT=9090
GRAFANA_API_KEY=your_grafana_api_key

# === REDIS CONFIGURATION (Optional) ===
# For caching and session management
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password
REDIS_DB=0

# === BACKUP CONFIGURATION ===
BACKUP_PATH=/path/to/backups
BACKUP_RETENTION_DAYS=30

# === WEBHOOK CONFIGURATION ===
# For TradingView or other webhooks
WEBHOOK_SECRET=generate_webhook_secret_here
WEBHOOK_ALLOWED_IPS=52.89.214.238,34.212.75.30,54.218.53.128,52.32.178.7

# === OTHER OPTIONAL SERVICES ===
# Brave Search API (Optional)
BRAVE_API_KEY=your_brave_api_key_here

# Gemini API (Optional)
GEMINI_API_KEY=your_gemini_api_key_here

# Claude Code Settings (Optional)
CLAUDE_CODE_PLANNING_PROVIDER=gemini
CLAUDE_CODE_PLANNING_MODEL=gemini-1.5-flash

# ====================================
# IMPORTANT SECURITY NOTES:
# ====================================
# 1. Use a secrets management service in production:
#    - AWS Secrets Manager
#    - Azure Key Vault
#    - HashiCorp Vault
#    - Kubernetes Secrets
#
# 2. Enable audit logging for all credential access
#
# 3. Implement credential rotation policy (monthly minimum)
#
# 4. Use different credentials for each environment
#
# 5. Monitor for unauthorized access attempts
#
# 6. Enable MFA wherever possible
#
# 7. Encrypt sensitive data at rest and in transit
#
# 8. NEVER log sensitive information
#
# 9. Use read-only database users where possible
#
# 10. Implement IP whitelisting for production servers
# ====================================
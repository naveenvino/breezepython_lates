"""
Strategy Manager Interface
Application interface for managing trading strategies
"""
from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional
from datetime import datetime


class IStrategyManager(ABC):
    """Interface for strategy management"""
    
    @abstractmethod
    async def register_strategy(
        self,
        strategy_name: str,
        strategy_class: str,
        parameters: Dict[str, Any],
        description: Optional[str] = None
    ) -> str:
        """Register a new strategy"""
        pass
    
    @abstractmethod
    async def get_strategy(
        self,
        strategy_name: str
    ) -> Dict[str, Any]:
        """Get strategy details"""
        pass
    
    @abstractmethod
    async def list_strategies(
        self,
        active_only: bool = False
    ) -> List[Dict[str, Any]]:
        """List all available strategies"""
        pass
    
    @abstractmethod
    async def update_strategy_parameters(
        self,
        strategy_name: str,
        parameters: Dict[str, Any]
    ) -> bool:
        """Update strategy parameters"""
        pass
    
    @abstractmethod
    async def activate_strategy(
        self,
        strategy_name: str,
        capital_allocation: Optional[float] = None
    ) -> bool:
        """Activate a strategy for live trading"""
        pass
    
    @abstractmethod
    async def deactivate_strategy(
        self,
        strategy_name: str,
        close_positions: bool = True
    ) -> bool:
        """Deactivate a strategy"""
        pass
    
    @abstractmethod
    async def get_strategy_performance(
        self,
        strategy_name: str,
        from_date: Optional[datetime] = None,
        to_date: Optional[datetime] = None
    ) -> Dict[str, Any]:
        """Get strategy performance metrics"""
        pass
    
    @abstractmethod
    async def get_strategy_positions(
        self,
        strategy_name: str,
        include_closed: bool = False
    ) -> List[Dict[str, Any]]:
        """Get positions for a strategy"""
        pass
    
    @abstractmethod
    async def get_strategy_signals(
        self,
        strategy_name: str,
        limit: int = 100
    ) -> List[Dict[str, Any]]:
        """Get recent signals generated by strategy"""
        pass
    
    @abstractmethod
    async def validate_strategy(
        self,
        strategy_name: str,
        test_data: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """Validate strategy configuration and logic"""
        pass
    
    @abstractmethod
    async def clone_strategy(
        self,
        source_strategy: str,
        new_name: str,
        parameter_overrides: Optional[Dict[str, Any]] = None
    ) -> str:
        """Clone an existing strategy"""
        pass
    
    @abstractmethod
    async def delete_strategy(
        self,
        strategy_name: str,
        force: bool = False
    ) -> bool:
        """Delete a strategy (only if inactive)"""
        pass
    
    @abstractmethod
    async def get_strategy_logs(
        self,
        strategy_name: str,
        from_time: Optional[datetime] = None,
        to_time: Optional[datetime] = None,
        log_level: Optional[str] = None
    ) -> List[Dict[str, Any]]:
        """Get strategy execution logs"""
        pass
    
    @abstractmethod
    async def set_strategy_limits(
        self,
        strategy_name: str,
        max_positions: Optional[int] = None,
        max_daily_trades: Optional[int] = None,
        max_position_size: Optional[float] = None,
        max_daily_loss: Optional[float] = None
    ) -> bool:
        """Set risk limits for a strategy"""
        pass